version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:16-alpine
    container_name: ambient-advertising-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ambient_advertising
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your-secure-password-here}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ambient_advertising"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ambient-network

  # Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ambient-advertising-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-your-secure-password-here}@postgres:5432/ambient_advertising
      SESSION_SECRET: ${SESSION_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GEMINI_MODEL: ${GEMINI_MODEL:-gemini-1.5-flash}
      GEMINI_TIMEOUT: ${GEMINI_TIMEOUT:-30000}
      PORT: 5000
    ports:
      - "${APP_PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - app_audio_prod:/app/audio
    networks:
      - ambient-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis (Production Session Store & Caching)
  redis:
    image: redis:7-alpine
    container_name: ambient-advertising-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    command: redis-server --requirepass ${REDIS_PASSWORD:-your-redis-password} --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-your-redis-password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ambient-network
    deploy:
      resources:
        limits:
          memory: 256M

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: ambient-advertising-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - ambient-network

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  app_audio_prod:
    driver: local

networks:
  ambient-network:
    driver: bridge