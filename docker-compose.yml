version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ambient-advertising-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ambient_advertising
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ambient_advertising"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ambient-network

  # Application (Development)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: ambient-advertising-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ambient_advertising
      SESSION_SECRET: dev-secret-key-change-in-production
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      GEMINI_MODEL: ${GEMINI_MODEL:-gemini-1.5-flash}
      GEMINI_TIMEOUT: ${GEMINI_TIMEOUT:-30000}
    volumes:
      - .:/app
      - /app/node_modules  # Exclude node_modules from sync
      - /app/dist          # Exclude dist from sync  
      - app_audio:/app/audio  # Persistent audio files
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ambient-network
    extra_hosts:
      - "host.docker.internal:host-gateway"  # Enable host access for Docker
    profiles:
      - dev

  # Application (Production)
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ambient-advertising-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ambient_advertising
      SESSION_SECRET: ${SESSION_SECRET:-change-this-in-production}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      GEMINI_MODEL: ${GEMINI_MODEL:-gemini-1.5-flash}
      GEMINI_TIMEOUT: ${GEMINI_TIMEOUT:-30000}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ambient-network
    profiles:
      - prod

  # Redis (for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: ambient-advertising-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ambient-network

  # pgAdmin (Database administration)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ambient-advertising-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ambient.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - ambient-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  app_audio:
    driver: local

networks:
  ambient-network:
    driver: bridge
